# This file was autogenerated by the 'packer hcl2_upgrade' command. We
# recommend double checking that everything is correct before going forward. We
# also recommend treating this file as disposable. The HCL2 blocks in this
# file can be moved to other files. For example, the variable blocks could be
# moved to their own 'variables.pkr.hcl' file, etc. Those files need to be
# suffixed with '.pkr.hcl' to be visible to Packer. To use multiple files at
# once they also need to be in the same folder. 'packer inspect folder/'
# will describe to you what is in that folder.

# Avoid mixing go templating calls ( for example ```{{ upper(`string`) }}``` )
# and HCL2 calls (for example '${ var.string_value_example }' ). They won't be
# executed together and the outcome will be unknown.

# All generated input variables will be of 'string' type as this is how Packer JSON
# views them; you can change their type later on. Read the variables type
# constraints documentation
# https://www.packer.io/docs/templates/hcl_templates/variables#type-constraints for more info.
variable "subscription_id" {
  type    = string
  default = env("AZURE_SUBSCRIPTION_ID")
}

variable "client_id" {
  type    = string
  default = env("AZURE_CLIENT_ID")
}

variable "tenant_id" {
  type    = string
  default = env("AZURE_TENANT_ID")
}

variable "client_secret" {
  type    = string
  default = env("AZURE_CLIENT_SECRET")
}

variable "app_env" {
  type    = string
  default = env("APP_ENV")
}

variable "version" {
  type    = string
  default = env("VERSION")
}

variable "consul_http_addr" {
  type    = string
  default = env("CONSUL_HTTP_ADDR")
}

variable "consul_http_token" {
  type    = string
  default = env("CONSUL_HTTP_TOKEN")
}
# https://www.packer.io/docs/templates/hcl_templates/functions/contextual/consul
locals {
  ami_name      = consul_key(join("/", ["polymathes/temporal", var.app_env, "packer/ami-name"]))
  ssh_username  = consul_key("polymathes/temporal/packer/ssh-username")
  source_ami    = consul_key("polymathes/temporal/packer/source-ami")
  instance_type = consul_key("polymathes/temporal/packer/instance-type")
}

# source blocks are generated from your builders; a source can be referenced in
# build blocks. A build block runs provisioner and post-processors on a
# source. Read the documentation for source blocks here:
# https://www.packer.io/docs/templates/hcl_templates/blocks/source
# https://www.packer.io/plugins/builders/azure/arm
source "azure-arm" "image" {
  subscription_id     = var.subscription_id
  tenant_id           = var.tenant_id
  client_secret       = var.client_secret
  client_id           = var.client_id
  resource_group_name = "cl-azure-network-prod"
  storage_account     = "hashicorpacker"

  capture_container_name = "images"
  capture_name_prefix    = "packer"

  os_type         = "Linux"
  image_publisher = "Canonical"
  image_offer     = "UbuntuServer"
  image_sku       = "18.04-LTS"

  location = "East US 2"
  vm_size  = "Standard_D2S_v3"

  azure_tags = {
    Name        = local.ami_name
    Environment = var.app_env
  }
}

# a build block invokes sources and runs provisioning steps on them. The
# documentation for build blocks can be found here:
# https://www.packer.io/docs/templates/hcl_templates/blocks/build
build {
  hcp_packer_registry {
    bucket_name = "azure"
    description = <<EOT
Some nice description about the image being published to HCP Packer Registry.
    EOT
    bucket_labels = {
      "Owner"          = "jveraduran"
      "OS"             = "Ubuntu",
      "Ubuntu-version" = "18.04 LTS",
      "Environment"    = var.app_env
    }

    build_labels = {
      "build-time"   = timestamp()
      "build-source" = basename(path.cwd)
    }
  }
  sources = [
    "source.azure-arm.image"
  ]

  # details about provisioner in the documentation
  #Â https://www.packer.io/docs/provisioners/shell
  provisioner "shell" {
    inline = [
    "sudo apt update -y",
    "sudo apt upgrade -y",
    "sudo apt-get install curl apt-transport-https ca-certificates software-properties-common -y",
    "curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -",
    <<EOT
    sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
    EOT
    ,
    "sudo apt update -y",
    "apt-cache policy docker-ce",
    "sudo systemctl status docker"
    // <<EOT
    // curl -sSL  --header "authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjoiY3ZlcmdhcmFlQHNtdS5jbCIsInJvbGUiOiJhZG1pbiIsImdyb3VwcyI6bnVsbCwicm9sZVBlcm1zIjpbWzI1NSwyNTUsMjU1LDI1NSwyNTUsMTI3LDFdLFsyNTUsMjU1LDI1NSwyNTUsMjU1LDEyNywxXV0sInNlc3Npb25UaW1lb3V0U2VjIjo1MTUsInNhYXNUb2tlbiI6ImV5SmhiR2NpT2lKSVV6STFOaUo5LmV5SnpkV0lpT2lKamRtVnlaMkZ5WVdWQWMyMTFMbU5zSWl3aWMyVnlkbWxqWlZWellXZGxUMjVzZVNJNmRISjFaU3dpWm1seWMzUk1iMmRwYmlJNlptRnNjMlVzSW5CeWFYTnRZVWxrSWpvaU9EVTJPVEkzTmprME16TTVNRGMzTVRJd0lpd2lhWEJCWkdSeVpYTnpJam9pTXpRdU56UXVPRFF1TlRFaUxDSnBjM01pT2lKb2RIUndjem92TDJGd2FUSXVjSEpwYzIxaFkyeHZkV1F1YVc4aUxDSnlaWE4wY21samRDSTZNQ3dpZFhObGNsSnZiR1ZVZVhCbFJHVjBZV2xzY3lJNmV5Sm9ZWE5QYm14NVVtVmhaRUZqWTJWemN5STZabUZzYzJWOUxDSjFjMlZ5VW05c1pWUjVjR1ZPWVcxbElqb2lVM2x6ZEdWdElFRmtiV2x1SWl3aWFYTlRVMDlUWlhOemFXOXVJanBtWVd4elpTd2liR0Z6ZEV4dloybHVWR2x0WlNJNk1UWTFPVFEzTWprNE9EWXpPU3dpWVhWa0lqb2lhSFIwY0hNNkx5OWhjR2t5TG5CeWFYTnRZV05zYjNWa0xtbHZJaXdpZFhObGNsSnZiR1ZVZVhCbFNXUWlPakVzSW5ObGJHVmpkR1ZrUTNWemRHOXRaWEpPWVcxbElqb2lVMjExSUZNdVlTNGdMU0F6TXpBNU16UTVNamd5TVRnd016WTVNRGd5SWl3aWMyVnpjMmx2YmxScGJXVnZkWFFpT2pNd0xDSjFjMlZ5VW05c1pVbGtJam9pTURZeVltUXlNbU10WkRrMFpDMDBZekkyTFdGbFlqUXRNemN4TldRMU0yTmxaak5oSWl3aWFHRnpSR1ZtWlc1a1pYSlFaWEp0YVhOemFXOXVjeUk2Wm1Gc2MyVXNJbVY0Y0NJNk1UWTFPVFEzTXpZeU5Dd2lhV0YwSWpveE5qVTVORGN6TURJMExDSjFjMlZ5Ym1GdFpTSTZJbU4yWlhKbllYSmhaVUJ6YlhVdVkyd2lMQ0oxYzJWeVVtOXNaVTVoYldVaU9pSlRlWE4wWlcwZ1FXUnRhVzRpZlEubFZjczJFVWtpOTdEUVV5RTRJYmo0UHhPNHhTTmFMWG5lVENMYVlSQ1NOUSIsImV4cCI6MTY1OTQ3NjcwOSwiaXNzIjoidHdpc3Rsb2NrIn0.k-zO18WRjoidM7fdg0tNBkji4ZXi5FAIuVW_OLwozRY" -X POST https://us-east1.cloud.twistlock.com/us-2-158315625/api/v1/scripts/defender.sh  | sudo bash -s -- -c "us-east1.cloud.twistlock.com" -d "none" -v
    // EOT
    ]
  }
}
